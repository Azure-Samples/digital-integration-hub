name: Build
 
on:
  workflow_dispatch:
  push:
    paths:
      - "src/**"
      - "logic/**"
      - ".github/workflows/build.yaml"

jobs:
  build_function:
    name: 'Build Function'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Use Node.js 14
        uses: actions/setup-node@v1
        with:
          node-version: '14.x'
      - name: Build for production
        run: |
          npm install --prefix src/function/
          npm run build --prefix src/function/
      - name: Test
        run: npm test --prefix src/function/
      - name: Package function
        run: (cd src/function; zip -r ../../function.zip .)
      - name: Upload app zip package
        uses: actions/upload-artifact@v2
        with:
          name: function
          path: ./function.zip
          retention-days: 1

  build_logic:
    name: 'Build Logic'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Package logic
        run: (cd logic; zip -r ../logic.zip .)
      - name: Upload app zip package
        uses: actions/upload-artifact@v2
        with:
          name: logic
          path: ./logic.zip
          retention-days: 1

  validate_bicep:
    name: 'Validate Bicep'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Build bicep
        run: az bicep build --file main.bicep
        working-directory: ./src/arm
      - name: Upload bicep files
        uses: actions/upload-artifact@v2
        with:
          name: arm
          path: ./src/arm/
          retention-days: 1

  build_and_publish_porter_bundle:
    name: 'Build and Publish Porter bundle'
    runs-on: ubuntu-latest
    needs: [validate_bicep, build_function, build_logic]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Get application artifacts
        uses: actions/download-artifact@v2
        with:
          path: ./src/bundle/output
      - name: Display bundle directory
        run: ls -R
        working-directory: ./src/bundle
      - name: Setup Porter
        uses: getporter/gh-action@v0.1.3
      - name: Prepare bundle metadata (part I)
        run: |
          echo IMAGE_NAME=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]' | cut -d'/' -f 2) >> $GITHUB_ENV
          echo BUNDLE_MAIN_VERSION=$(cat porter.yaml | awk '$1 == "version:" {print $2}') >> $GITHUB_ENV
          echo BUNDLE_REGISTRY=ghcr.io/$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]') >> $GITHUB_ENV
        working-directory: ./src/bundle
      - name: Prepare bundle metadata (part II)
        run: |
          echo BUNDLE_VERSION=$BUNDLE_MAIN_VERSION-$GITHUB_SHA >> $GITHUB_ENV
      - name: Build Porter bundle
        run: porter build --name "$IMAGE_NAME" --version "$BUNDLE_VERSION"
        working-directory: ./src/bundle
      - name: Login to GitHub Packages OCI Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.PACKAGE_ADMIN }}
      - name: Porter publish
        run: porter publish --registry "$BUNDLE_REGISTRY"
        working-directory: ./src/bundle
      - name: Create copies for latest reference
        run: |
          porter copy --source "${BUNDLE_REGISTRY}/${IMAGE_NAME}:${BUNDLE_VERSION}" --destination "${BUNDLE_REGISTRY}/${IMAGE_NAME}:latest"
          porter copy --source "${BUNDLE_REGISTRY}/${IMAGE_NAME}:${BUNDLE_VERSION}" --destination "${BUNDLE_REGISTRY}/${IMAGE_NAME}:${BUNDLE_MAIN_VERSION}-latest"
        working-directory: ./src/bundle