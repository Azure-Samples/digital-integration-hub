name: my_github_repo
version: v0.0.1
description: 'Porter bundle for Digital Integration Hub'
registry: ghcr.io/my_github_username
dockerfile: Dockerfile.tmpl

parameters:
  - name: LOCATION
    type: string
    description: 'Azure region for the resource group and resources'
  - name: NAME_PREFIX
    type: string
    description: 'Name prefix for Azure resources'
  - name: POSTGRES_PASSWORD
    type: string
    sensitive: true
    description: 'GitHub Secret used as password for the Postgres ad admin user'
  
credentials:
  - name: AZURE_CREDENTIALS
    env: AZURE_CREDENTIALS

mixins:
  - az
  - exec

install:
  - exec:
      description: 'Extracting deployment parameters...'
      command: ./utils.sh
      arguments:
        - echo-azure-credentials
      outputs:
        - name: 'AZURE_DEPLOY_CLIENT_ID'
          jsonPath: '$.clientId'
        - name: 'AZURE_DEPLOY_CLIENT_SECRET'
          jsonPath: '$.clientSecret'
        - name: 'AZURE_DEPLOY_TENANT_ID'
          jsonPath: '$.tenantId'
        - name: 'AZURE_DEPLOY_SUBSCRIPTION_ID'
          jsonPath: '$.subscriptionId'

  - az:
      description: 'Logging into Azure.'
      arguments:
        - login
      flags:
        service-principal:
        username: '{{ bundle.outputs.AZURE_DEPLOY_CLIENT_ID }}'
        password: '{{ bundle.outputs.AZURE_DEPLOY_CLIENT_SECRET }}'
        tenant: '{{ bundle.outputs.AZURE_DEPLOY_TENANT_ID }}'
        output: table

  - az:
      description: 'Setting subscription.'
      arguments:
        - account
        - set
      flags:
        subscription: '{{ bundle.outputs.AZURE_DEPLOY_SUBSCRIPTION_ID }}'

  - az:
      description: 'Creating the Azure resource group if it does not exists.'
      arguments:
        - group
        - create
      flags:
        name: '{{ bundle.parameters.NAME_PREFIX }}'
        location: '{{ bundle.parameters.LOCATION }}'

  - az:
      description: 'Deploying the ARM template'
      arguments:
        - deployment
        - group
        - create
      flags:
        resource-group: '{{ bundle.parameters.NAME_PREFIX }}'
        name: '{{ bundle.parameters.NAME_PREFIX }}-deployment'
        template-file: 'output/arm/main.bicep'
        parameters: '
        location={{ bundle.parameters.LOCATION }}
        name_prefix={{ bundle.parameters.NAME_PREFIX }}
        postgres_adminPassword={{ bundle.parameters.POSTGRES_PASSWORD }}
        '
      outputs:
        - name: 'POSTGRES_HOST'
          jsonPath: '$.properties.outputs.postgres_host.value'
        - name: 'POSTGRES_USER'
          jsonPath: '$.properties.outputs.postgres_user.value'
        - name: 'POSTGRES_DB'
          jsonPath: '$.properties.outputs.postgres_db.value'
        - name: 'FUNCTION_ID'
          jsonPath: '$.properties.outputs.function_id.value'
        - name: 'LOGIC_NAME'
          jsonPath: '$.properties.outputs.logic_name.value'
        - name: 'logicAppSystemAssignedIdentityObjectId'
          jsonPath: '$.properties.outputs.logicAppSystemAssignedIdentityObjectId.value'
        - name: 'logicAppSystemAssignedIdentityTenantId'
          jsonPath: '$.properties.outputs.logicAppSystemAssignedIdentityTenantId.value'
        - name: 'APIM_NAME'
          jsonPath: '$.properties.outputs.apimName.value'
        - name: 'EVENTGRID_NAME'
          jsonPath: '$.properties.outputs.eventgrid_name.value'

  - az:
      description: 'Deploying the APIM Service template'
      arguments:
        - deployment
        - group
        - create
      flags:
        resource-group: '{{ bundle.parameters.NAME_PREFIX }}'
        name: '{{ bundle.parameters.NAME_PREFIX }}-apiservice-deployment'
        template-file: 'output/arm/apimService.bicep'
        parameters: '
        apimName={{ bundle.outputs.APIM_NAME }}
        '

  - az:
      description: 'Deploying the Logic App Service template'
      arguments:
        - deployment
        - group
        - create
      flags:
        resource-group: '{{ bundle.parameters.NAME_PREFIX }}'
        name: '{{ bundle.parameters.NAME_PREFIX }}-logicappresource-deployment'
        template-file: 'output/arm/connectors.json'
        parameters: '
        objectid={{ bundle.outputs.logicAppSystemAssignedIdentityObjectId }}
        principleid={{ bundle.outputs.logicAppSystemAssignedIdentityTenantId }}
        tenantid={{ bundle.outputs.AZURE_DEPLOY_TENANT_ID }}
        clientid={{ bundle.outputs.AZURE_DEPLOY_CLIENT_ID }}
        clientsecret={{ bundle.outputs.AZURE_DEPLOY_CLIENT_SECRET }}
        connectionsEventgridName={{ bundle.parameters.NAME_PREFIX }}-eventgrid-connector
        location={{ bundle.parameters.LOCATION }}
        '
      outputs:
        - name: 'eventgridRuntimeConnectionUrl'
          jsonPath: '$.properties.outputs.eventgridRuntimeConnectionUrl.value'

  - exec:
      description: 'Unzip app directory'
      command: unzip
      arguments:
      - '-q'
      - output/function/function.zip
      flags:
        d: function

  - exec:
      command: ./db_migration.sh
      description: 'Run database migration script'
      arguments:
        - '{{ bundle.outputs.POSTGRES_DB }}'
        - '{{ bundle.outputs.POSTGRES_HOST }}'
        - '{{ bundle.parameters.POSTGRES_PASSWORD }}'
        - '{{ bundle.outputs.POSTGRES_USER }}@{{ bundle.outputs.POSTGRES_HOST }}'
      suppress-output: false

  - exec:
      command: ./zip_deploy.sh
      description: 'Deploy the Function'
      arguments:
        - '{{ bundle.outputs.FUNCTION_ID }}'
        - output/function/function.zip
        - '{{ bundle.parameters.NAME_PREFIX }}'
        - '{{ bundle.outputs.EVENTGRID_NAME }}'
      suppress-output: false

  - exec:
      command: ./zip_deploy_la.sh
      description: 'Deploy the Logic App'
      arguments:
        - '{{ bundle.parameters.NAME_PREFIX }}'
        - '{{ bundle.outputs.LOGIC_NAME }}'
        - output/logic/logic.zip
        - '{{ bundle.outputs.EVENTGRID_NAME }}'
        - '{{ bundle.outputs.eventgridRuntimeConnectionUrl }}'
        - '{{ bundle.outputs.AZURE_DEPLOY_SUBSCRIPTION_ID  }}'
      suppress-output: false

uninstall:
  - az:
      description: 'Deleting the entire resource group.'
      arguments:
        - group
        - delete
      flags:
        name: '{{ bundle.parameters.NAME_PREFIX }}'
        yes: ''
        no-wait: ''